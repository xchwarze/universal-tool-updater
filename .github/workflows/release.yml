name: Create Release
on:
  workflow_dispatch:
  release:
    types: [created]

jobs:      
  generate-build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: 'x86'

      - name: Install dependencies
        working-directory: ./src
        run: pip install -r requirements.txt

      - name: Install PyInstaller and pyinstaller-versionfile
        run: |
          pip install pyinstaller
          pip install pyinstaller-versionfile

      - name: Extract version from sources
        shell: bash
        run: |
          VERSION=$(awk -F"'" '/self.version = / {print $2}' ./src/UpdateManager.py)
          echo "Detected VERSION: $VERSION"
          echo "PROJECT_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Generate version file
        shell: bash
        run: |
          pyivf-make_version \
            --outfile src/version_info.txt \
            --version ${{ env.PROJECT_VERSION }} \
            --company-name "Indetectables" \
            --file-description "Universal Tool Updater" \
            --internal-name "UpdateManager" \
            --legal-copyright "Â© 2024 github.com/xchwarze. All rights reserved." \
            --original-filename "updater.exe" \
            --product-name "Universal Tool Updater"
          echo "Generated version file content:"
          cat src/version_info.txt

      - name: Build the .exe application
        working-directory: ./src
        run: pyinstaller --onefile UpdateManager.py --icon=../assets/appicon.ico --version-file=version_info.txt

      - name: Test build
        run: |
          cp src/dist/UpdateManager.exe updater.exe
          ./updater.exe --disable-self-update --disable-progress-bar --disable-install-check --disable-repack --force

      - name: Upload the built .exe as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-x86
          path: ./src/dist
        
  create-release:
    needs: generate-build
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          path: ./builds

      - name: Prepare the release directory
        run: |
          mkdir -p release/extras
          cp -r extras/* release/extras/
          cp builds/build-x86/UpdateManager.exe release/updater.exe
          cp unrar.exe release/
          cp tools.ini release/
          cp *.md release/
          cp *.txt release/

      - name: Compress the release directory
        run: zip -r release-x86.zip release/

      - name: Upload Setup as Release download
        uses: softprops/action-gh-release@v2
        with:
          files: release-x86.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
